#!/usr/bin/bash

export GENCODE_TSV=gencode.v17.transcript.tsv
export CHIMP_NET=panTro4_net_rbest     # netPanTro4
export RHESUS_NET=rheMac3_net_rbest    # netRheMac3

export PROM=250 ## 1000
export MAXLEN=60000 ## Max length in base pairs.

export INCREMENTS=gene.increments.bed
export GENEBODIES=genebodies.tsv
export PAUSESITES=pausesites.tsv

## Get annotations from GenCode.
function getAnnotations {
# wget ftp://ftp.sanger.ac.uk/pub/gencode/release_17/gencode.v17.annotation.gtf.gz # 7/23/2013
 zcat gencode.v17.annotation.gtf.gz | \
	awk 'BEGIN{OFS="\t"}{ if($3 == "transcript") {print $1,$4,$5,"GC."$1"_"$4"_"$5"_"$7,"0",$7,$14,$18,$10,$12} }' | \
	sed 's/"//g' | sed 's/;//g' | sed '/#.*/d' | uniq | awk '$3 > $2 {print $0}' | sort-bed - > $GENCODE_TSV
 cat $GENCODE_TSV | perl ~/perl/col.stdin.pl 7 | sort | uniq > UNIQUETYPES
}
getAnnotations ## Run on 7/23/2013.

function makeOrthoAnnot {
 ## Get gap data.
 hgsql hg19 -e "select qName,qStart,qEnd,type,level from $NET where level like 2" | grep "^c" | sort-bed - > $NET.L2.bed
 hgsql hg19 -e "select qName,qStart,qEnd,type,level from $NET where level like 3" | grep "^c" | sort-bed - > $NET.L3.bed.keep
 hgsql hg19 -e "select qName,qStart,qEnd,type,level from $NET where level like 4" | grep "^c" | sort-bed - > $NET.L4.bed
 hgsql hg19 -e "select qName,qStart,qEnd,type,level from $NET where level like 5" | grep "^c" | sort-bed - > $NET.L5.bed
 hgsql hg19 -e "select qName,qStart,qEnd,type,level from $NET where level like 6" | grep "^c" | sort-bed - > $NET.L6.bed

 bedops --difference $NET.L2.bed $NET.L3.bed.keep > $NET.Gap2.bed ## Gets those in L2 which aren't in L3 ...
 bedops --difference $NET.L4.bed $NET.L5.bed      > $NET.Gap3.bed ## Gets those in L2 which aren't in L3 ...

 bedops --merge $NET.Gap2.bed $NET.Gap3.bed $NET.L6.bed > $NET.gapMerge.save ## Add back gaps in L4 ...

 rm $NET*.bed 
}

export NET=$CHIMP_NET
makeOrthoAnnot
export NET=$RHESUS_NET
makeOrthoAnnot

## Combine gaps.
bedops --merge $CHIMP_NET.gapMerge.save $RHESUS_NET.gapMerge.save > gapMerge.tmp

## Make a gene list and partition.
cat $GENCODE_TSV | awk 'BEGIN{OFS="\t"; ORS=""} {if (($3-$2) > '"$PROM"')
                                         {if ($6 == "+") print $1,($2+'"$PROM"'), ($3<($2+'"$MAXLEN"')) ? $3 : ($2+'"$MAXLEN"')
                                         else if ($6 == "-") print $1, ($2>($3-'"$MAXLEN"')) ? $2 : $3-'"$MAXLEN"' ,($3-'"$PROM"')}
                                        else print $1,$2,$3} {print "\t",$4,$5,$6,$7,$8,"\n"}' | uniq | sort-bed - > $GENEBODIES

## Partition on the merged gaps.  IMPORTANT: Should not have any partial matches in later steps.
bedops --partition gapMerge.tmp $GENEBODIES > gene.gap.part.tmp

## Remove partition bits that fall in gaps.
bedmap --echo --indicator gene.gap.part.tmp gapMerge.tmp | grep "0$" | sed "s/|0//g" > gene.woGap.tmp

## Get the strand(s) of the gene(s) associated with each interval.
bedmap --echo --echo-map gene.woGap.tmp $GENEBODIES | sed "s/|chr/\t/g" \
							 | awk 'BEGIN{OFS="\t"} {p= match($0, "+")} {m= match($0, "-")} 
								{if(p>0) print $1,$2,$3,"N","0","+"}
								{if(m>0) print $1,$2,$3,"N","0","-"}' > $INCREMENTS


## Get data from pause sites, removing any bits that fall into gaps.
cat $GENCODE_TSV | awk 'BEGIN{OFS="\t"; ORS=""} {if ($6 == "+") print $1,($2-'"$PROM"'),($2+'"$PROM"')
                                                 else if ($6 == "-") print $1,($3-'"$PROM"'),($3+'"$PROM"') }
                                          {print "\t",$4,$5,$6,$7,$8,"\n"}' | uniq | sort-bed - |
                                          bedmap --echo --indicator - gapMerge.tmp | grep "0$" | sed "s/|0//g" > $PAUSESITES
## TODO: Further intersect pause sites with TSS, to identify the active subset of them!!


rm *.save *.tmp
