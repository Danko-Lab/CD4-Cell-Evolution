#!/usr/bin/bash
HS=Merge # HighScore
LS=LowScore
RD=Results

CLUSTER=1000 ## bp

## STRATEGY: ###########
## Naive intersections.
# THe problem with this startegy: boundaries of peaks are often taken.
function getNaive {
 echo "Conserved"
 featureBits hg19 $HS/H-$1.TSS.bed.gz $HS/C-$1.TSS_hg19.bed.gz $HS/M-$1.TSS_hg19.bed.gz -bed=$RD/cons-$1.bed      ## Conserved across all species.

 echo "Human Gains"
 featureBits hg19 $HS/H-$1.TSS.bed.gz !$LS/C-$1.TSS_hg19.bed.gz !$LS/M-$1.TSS_hg19.bed.gz -bed=$RD/H-$1.gain.bed  ## Human gains.

 echo "Human Loss"
 featureBits hg19 !$LS/H-$1.TSS.bed.gz $HS/C-$1.TSS_hg19.bed.gz $HS/M-$1.TSS_hg19.bed.gz -bed=$RD/H-$1.loss.bed   ## Human loss.

 cat  $RD/H-$1.gain.bed $RD/H-$1.loss.bed | sort-bed - | bedops --merge - > $RD/H-$1.gain.loss.bed

 echo "Human Gains AND Losses"
 featureBits hg19 $RD/H.gain.loss.bed
}

#echo "Naive U"
#getNaive U

#echo "Naive PI"
#getNaive PI

## STRATEGY: ###########
## Intersect superset.
function getSuperset {
 zcat $HS/H-$1.TSS.bed.gz $HS/C-$1.TSS_hg19.bed.gz $HS/M-$1.TSS_hg19.bed.gz | sort-bed - | bedops --merge - > tmp.bed

 ## Get the max score for H, C, and M
 zcat H-$1.TSS.bedGraph.gz      | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,"n",$4}' | sort-bed - | bedmap --max tmp.bed - > H.tmp
 zcat C-$1.TSS_hg19.bedGraph.gz | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,"n",$4}' | sort-bed - | bedmap --max tmp.bed - > C.tmp
 zcat M-$1.TSS_hg19.bedGraph.gz | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,"n",$4}' | sort-bed - | bedmap --max tmp.bed - > M.tmp

 paste tmp.bed H.tmp C.tmp M.tmp > all.tmp
 R --no-save --args all.tmp $RD/HCM-$1.dREG < sortRatios.R 
 rm tmp.bed *.tmp
}

echo "Superset U"
getSuperset U

echo "Superset PI"
getSuperset PI

####
## Now merge ALL datasets, to test for changes in the expression of dREG elements.

 zcat $HS/H-*.TSS.bed.gz $HS/C-*.TSS_hg19.bed.gz $HS/M-*.TSS_hg19.bed.gz | sort-bed - | bedops --merge - > tmp.bed
 ## Merge into clusters of TSS

 ## Get the max score for H, C, and M.
 zcat H-U.TSS.bedGraph.gz      | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,"n",$4}' | sort-bed - | bedmap --max tmp.bed - > Hu.tmp
 zcat C-U.TSS_hg19.bedGraph.gz | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,"n",$4}' | sort-bed - | bedmap --max tmp.bed - > Cu.tmp
 zcat M-U.TSS_hg19.bedGraph.gz | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,"n",$4}' | sort-bed - | bedmap --max tmp.bed - > Mu.tmp

 zcat H-PI.TSS.bedGraph.gz      | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,"n",$4}' | sort-bed - | bedmap --max tmp.bed - > Hp.tmp
 zcat C-PI.TSS_hg19.bedGraph.gz | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,"n",$4}' | sort-bed - | bedmap --max tmp.bed - > Cp.tmp
 zcat M-PI.TSS_hg19.bedGraph.gz | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,"n",$4}' | sort-bed - | bedmap --max tmp.bed - > Mp.tmp

 ## Paste sites together. 
 paste tmp.bed Hu.tmp Cu.tmp Mu.tmp Hp.tmp Cp.tmp Mp.tmp > $RD/HCM-U-PI.dREG-tss-clusters.tsv
 rm *.tmp tmp.bed




