#!/usr/bin/bash
rm *.tmp

export GENCODE_TSV=$GENCODE_EXON_PATHS
export CHIMP_NET=panTro4_net_rbest     # netPanTro4
export RHESUS_NET=rheMac3_net_rbest    # netRheMac3

export PROM=250 ## 1000
export MAXLEN=60000 ## Max length in base pairs.
export MINLEN=500

export INCREMENTS=exons.increments.bed
export NOMAPLOCI=/usr/projects/GROseq/NHP/AllData/mapping/allUnmap.merge.bed.starch

######################################
## Use Transcription Units detected by HMM ...
zcat ../tu_caller/annot/TU.final.bed.gz | sort-bed - > $GENCODE_TSV

######################################
## Get gaps in the assembly.

function makeOrthoAnnot {
 ## Get gap data.
 hgsql hg19 -e "select qName,qStart,qEnd,type,level from $NET where level like 2 AND qEnd > qStart" | grep "^c" | sort-bed - > $NET.L2.bed
 hgsql hg19 -e "select qName,qStart,qEnd,type,level from $NET where level like 3 AND qEnd > qStart" | grep "^c" | sort-bed - > $NET.L3.bed.keep
 hgsql hg19 -e "select qName,qStart,qEnd,type,level from $NET where level like 4 AND qEnd > qStart" | grep "^c" | sort-bed - > $NET.L4.bed
 hgsql hg19 -e "select qName,qStart,qEnd,type,level from $NET where level like 5 AND qEnd > qStart" | grep "^c" | sort-bed - > $NET.L5.bed
 hgsql hg19 -e "select qName,qStart,qEnd,type,level from $NET where level like 6 AND qEnd > qStart" | grep "^c" | sort-bed - > $NET.L6.bed

 bedops --difference $NET.L2.bed $NET.L3.bed.keep > $NET.Gap2.bed ## Gets those in L2 which aren't in L3 ...
 bedops --difference $NET.L4.bed $NET.L5.bed      > $NET.Gap3.bed ## Gets those in L2 which aren't in L3 ...

 bedops --merge $NET.Gap2.bed $NET.Gap3.bed $NET.L6.bed > $NET.gapMerge.save ## Add back gaps in L4 ...

 rm $NET*.bed 
}

####
## Make GAPS
#export NET=$CHIMP_NET
#makeOrthoAnnot
#export NET=$RHESUS_NET
#makeOrthoAnnot

## Combine gaps and mappability loci in hg19 coordinates.
bedops --merge $CHIMP_NET.gapMerge.save $RHESUS_NET.gapMerge.save $NOMAPLOCI > gapMerge
#rm *.save

######################################
## Now make increments.

function makeIncrements {
 ## Partition on the merged gaps.  IMPORTANT: Should not have any partial matches in later steps.
 bedops --partition gapMerge $1 > gene.gap.part.tmp

 ## Remove partition bits that fall in gaps.
 bedmap --echo --indicator gene.gap.part.tmp gapMerge | grep "0$" | sed "s/|0//g" > gene.woGap.tmp

 ## Get the strand(s) of the gene(s) associated with each interval.
 bedmap --echo --echo-map gene.woGap.tmp $1 | sed "s/|chr/\t/g" \
							 | awk 'BEGIN{OFS="\t"} {p= match($0, "\t+\t")} {m= match($0, "\t-\t")} {b= match($0, "\t.\t")} 
								{if(p>0) print $1,$2,$3,"N","0","+"}
								{if(m>0) print $1,$2,$3,"N","0","-"}
								{if(b>0) print $1,$2,$3,"N","0","+\n" $1,$2,$3,"N","0","-"}' > $2
 ## Cleanup
 rm *.tmp
}

####
## Make a gene list and partition.
makeIncrements $EXONS $INCREMENTS 


